{"version":3,"sources":["app.js","node.js","document.js","blockelement.js","blockquote.js","code.js","codeblock.js","em.js","heading.js","image.js","linebreak.js","link.js","listblock.js","listitem.js","paragraph.js","strong.js","stringreader.js","html5renderer.js","charstream.js","lookaheadsuccess.js","parser.js","token.js","tokenmanager.js","treestate.js"],"names":["koara","exports","nodeType","root","module","Node","this","children","prototype","constructor","add","n","i","push","childrenAccept","renderer","length","accept","Document","visitDocument","BlockElement","isNested","parent","isSingleChild","visit","BlockQuote","Code","CodeBlock","Em","Heading","Image","LineBreak","Link","ListBlock","ListItem","Paragraph","Strong","StringReader","text","index","read","buffer","offset","substr","charactersRead","c","Html5Renderer","node","output","CharStream","reader","available","bufsize","tokenBegin","bufcolumn","bufpos","bufline","column","line","prevCharIsLF","maxNextCharInd","inBuf","tabSize","beginToken","readChar","fillBuff","updateLineColumn","e","backup","amount","getImage","slice","join","getBeginColumn","getBeginLine","getEndColumn","getEndLine","LookaheadSuccess","Parser","lookAheadSuccess","modules","parse","parseReader","cs","tm","TokenManager","token","Token","tree","TreeState","nextTokenKind","document","openScope","nodes","marks","nodesOnStack","currentMark","closeScope","a","nodeArity","pop","popNode","setParent","pushNode","addSingleValue","t","setValue","image"],"mappings":"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","file":"koara.min.js","sourcesContent":["var koara = {}\n\nif (typeof exports != 'undefined' && !exports.nodeType) {\n  if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n    exports = module.exports = koara;\n  }\n  exports.koara = koara;\n} else {\n  root.koara = koara;\n}","koara.Node = function() {\n\tthis.children = [];\n}\n\nkoara.Node.prototype = {\n\tconstructor: koara.Node, \n\t\n\tadd: function(n, i) {\n\t\tchildren.push(n);\n\t}, \n\t\n\tchildrenAccept: function(renderer) {\n\t\tfor(var i=0; i < this.children.length; i++) {\n\t\t\tthis.children[i].accept(renderer);\n\t\t}\n\t}\n\t\n}","'use strict';\n\nkoara.Document = function() {}\nkoara.Document.prototype = new koara.Node();\nkoara.Document.prototype.constructor = koara.Document;\n\nkoara.Document.prototype.accept = function(renderer) {\n\trenderer.visitDocument(this);\n};\n\n","koara.BlockElement = function() {}\nkoara.BlockElement.prototype = new koara.Node();\n\nkoara.BlockElement.prototype = {\n\tconstructor: koara.BlockElement,\n\n\tisNested: function() {\n\t\treturn !(this.parent instanceof Document);\n\t}, \n\t\n\tisSingleChild: function() {\n\t\treturn this.parent.children.length == 1;\n\t},\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this);\n\t}\n\t\n}","koara.BlockQuote = function() {}\nkoara.BlockQuote.prototype = new koara.BlockElement();\n\nkoara.BlockQuote.prototype = {\n\tconstructor: koara.BlockQuote,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Code = function() {}\nkoara.Code.prototype = new koara.Node();\n\nkoara.Code.prototype = {\n\tconstructor: koara.Code,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}\n","koara.CodeBlock = function() {}\nkoara.CodeBlock.prototype = new koara.BlockElement();\n\nkoara.CodeBlock.prototype = {\n\tconstructor: koara.CodeBlock,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}\n","koara.Em = function() {}\nkoara.Em.prototype = new koara.Node();\n\nkoara.Em.prototype = {\n\tconstructor: koara.Em,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Heading = function() {}\nkoara.Heading.prototype = new koara.BlockElement();\n\nkoara.Heading.prototype = {\n\tconstructor: koara.Heading,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Image = function() {}\nkoara.Image.prototype = new koara.Node();\n\nkoara.Image.prototype = {\n\tconstructor: koara.Image,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.LineBreak = function() {}\nkoara.LineBreak.prototype = new koara.Node();\n\nkoara.LineBreak.prototype = {\n\tconstructor: koara.LineBreak,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Link = function() {}\nkoara.Link.prototype = new koara.Node();\n\nkoara.Link.prototype = {\n\tconstructor: koara.Link,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.ListBlock = function() {}\nkoara.ListBlock.prototype = new koara.BlockElement();\n\nkoara.ListBlock.prototype = {\n\tconstructor: koara.ListBlock,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.ListItem = function() {}\nkoara.ListItem.prototype = new koara.Node();\n\nkoara.ListItem.prototype = {\n\tconstructor: koara.ListItem,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Paragraph = function() {}\nkoara.Paragraph.prototype = new koara.BlockElement();\n\nkoara.Paragraph.prototype = {\n\tconstructor: koara.Paragraph,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","koara.Strong = function() {}\nkoara.Strong.prototype = new koara.Node();\n\nkoara.Strong.prototype = {\n\tconstructor: koara.Strong,\n\t\n\taccept: function(renderer) {\n\t\trenderer.visit(this)\n\t}\n}","'use strict';\n\nkoara.StringReader = function(text) {\n\tthis.index = 0;\n\tthis.text = text;\n}\n\nkoara.StringReader.prototype = {\n\tconstructor: koara.StringReader,\n\t\n\tread: function(buffer, offset, length) {\n\t\tif(this.text.substr(this.index).length > 0) {\n\t\t\tvar charactersRead = 0;\n\t\t\tfor(var i=0; i < length; i++) {\n\t\t\t\tvar c = this.text.substr(this.index + i, 1);\n\t\t\t\tif(c !== '') {\n\t\t\t\t\tbuffer[offset + i] = c;\n\t\t\t\t\tcharactersRead++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.index += length;\n\t\t\treturn charactersRead;\n\t\t}\n\t\treturn -1;\n\t}\n}","koara.Html5Renderer = function() {}\n\nkoara.Html5Renderer.prototype = {\n\tconstructor: koara.Html5Renderer,\n\t\n\tvisitDocument: function(node) {\n\t\tthis.output = 'x';\n\t\tnode.childrenAccept(this);\n\t}\n}\n\n//public class Html5Renderer implements Renderer {\n//\n//\tprivate StringBuffer out;\n//\tprivate int level;\n//\tprivate Stack<Integer> listSequence = new Stack<Integer>();\n//\n//\tpublic void visit(Heading node) {\n//\t\tout.append(indent() + \"<h\" + node.getValue() + \">\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"</h\" + node.getValue() + \">\\n\");\n//\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t}\n//\t\n//\tpublic void visit(BlockQuote node) {\n//\t\tout.append(indent() + \"<blockquote>\");\n//\t\tif(node.getChildren() != null && node.getChildren().length > 0) { out.append(\"\\n\"); }\n//\t\tlevel++;\n//\t\tnode.childrenAccept(this);\n//\t\tlevel--;\n//\t\tout.append(indent() + \"</blockquote>\\n\");\n//\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t}\n//\t\n//\tpublic void visit(ListBlock node) {\n//\t\tlistSequence.push(0);\n//\t\tString tag = node.isOrdered() ? \"ol\" : \"ul\";\n//\t\tout.append(indent() + \"<\" + tag + \">\\n\");\n//\t\tlevel++;\n//\t\tnode.childrenAccept(this);\n//\t\tlevel--;\n//\t\tout.append(indent() + \"</\" + tag + \">\\n\");\n//\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t\tlistSequence.pop();\n//\t}\n//\t\n//\tpublic void visit(ListItem node) {\n//\t\tInteger seq = listSequence.peek() + 1;\t\t\n//\t\tlistSequence.set(listSequence.size() - 1, seq);\n//\t\tout.append(indent() + \"<li\");\n//\t\tif(node.getNumber() != null && (seq != node.getNumber())) {\n//\t\t\tout.append(\" value=\\\"\" + node.getNumber() + \"\\\"\");\n//\t\t\tlistSequence.push(node.getNumber());\n//\t\t}\n//\t\tout.append(\">\");\n//\t\tif(node.getChildren() != null) {\n//\t\t\tboolean block = (node.getChildren()[0].getClass() == Paragraph.class || node.getChildren()[0].getClass() == BlockElement.class);\n//\t\t\t\n//\t\t\tif(node.getChildren().length > 1 || !block) { out.append(\"\\n\"); }\n//\t\t\tlevel++;\n//\t\t\tnode.childrenAccept(this);\n//\t\t\tlevel--;\n//\t\t\tif(node.getChildren().length > 1 || !block) { out.append(indent()); }\n//\t\t}\n//\t\tout.append(\"</li>\\n\");\n//\t}\n//\t\n//\tpublic void visit(CodeBlock node) {\n//\t\tout.append(indent() + \"<pre><code\");\n//\t\tif(node.getLanguage() != null) {\n//\t\t\tout.append(\" class=\\\"language-\" + escape(node.getLanguage()) + \"\\\"\");\n//\t\t}\n//\t\tout.append(\">\");\n//\t\tout.append(escape(node.getValue().toString()) + \"</code></pre>\\n\");\n//\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t}\n//\n//\tpublic void visit(Paragraph node) {\n//\t\tif(node.isNested() && (node.getParent() instanceof ListItem) && node.isSingleChild()) {\n//\t\t\tnode.childrenAccept(this);\n//\t\t} else {\n//\t\t\tout.append(indent() + \"<p>\");\n//\t\t\tnode.childrenAccept(this);\n//\t\t\tout.append(\"</p>\\n\");\n//\t\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t\t}\n//\t}\n//\t\n//\t@Override\n//\tpublic void visit(BlockElement node) {\n//\t\tif(node.isNested() && (node.getParent() instanceof ListItem) && node.isSingleChild()) {\n//\t\t\tnode.childrenAccept(this);\n//\t\t} else {\n//\t\t\tout.append(indent());\n//\t\t\tnode.childrenAccept(this);\n//\t\t\tif(!node.isNested()) { out.append(\"\\n\"); }\n//\t\t}\n//\t}\n//\t\t\n//\tpublic void visit(Image node) {\n//\t\tout.append(\"<img src=\\\"\" + escapeUrl(node.getValue().toString()) + \"\\\" alt=\\\"\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"\\\" />\");\n//\t}\n//\t\n//\tpublic void visit(Link node) {\n//\t\tout.append(\"<a href=\\\"\" + escapeUrl(node.getValue().toString()) + \"\\\">\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"</a>\");\n//\t}\n//\t\n//\tpublic void visit(Strong node) {\n//\t\tout.append(\"<strong>\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"</strong>\");\n//\t}\n//\t\n//\tpublic void visit(Em node) {\n//\t\tout.append(\"<em>\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"</em>\");\n//\t}\n//\t\n//\tpublic void visit(Code node) {\n//\t\tout.append(\"<code>\");\n//\t\tnode.childrenAccept(this);\n//\t\tout.append(\"</code>\");\n//\t}\n//\t\t\n//\tpublic void visit(Text node) {\n//\t\tout.append(escape(node.getValue().toString()));\n//\t}\n//\t\n//\tpublic String escape(String text) {\n//\t\treturn text.replaceAll(\"&\", \"&amp;\")\n//\t\t\t\t.replaceAll(\"<\", \"&lt;\")\n//\t\t\t\t.replaceAll(\">\", \"&gt;\")\n//\t\t\t\t.replaceAll(\"\\\"\", \"&quot;\");\n//\t}\n//\t\n//\tpublic void visit(LineBreak node) {\n//\t\tout.append(\"<br>\\n\" + indent());\n//\t\tnode.childrenAccept(this);\n//\t}\n//\t\n//\tpublic String escapeUrl(String text) {\n//\t\treturn text.replaceAll(\" \", \"%20\")\n//\t\t\t\t.replaceAll(\"\\\"\", \"%22\")\n//\t\t\t\t.replaceAll(\"`\", \"%60\")\n//\t\t\t\t.replaceAll(\"<\", \"%3C\")\n//\t\t\t\t.replaceAll(\">\", \"%3E\")\n//\t\t\t\t.replaceAll(\"\\\\[\", \"%5B\")\n//\t\t\t\t.replaceAll(\"\\\\]\", \"%5D\")\n//\t\t\t\t.replaceAll(\"\\\\\\\\\", \"%5C\");\n//\t}\n//\t\n//\tpublic String indent() {\n//\t\tint repeat = level * 2;\n//\t    final char[] buf = new char[repeat];\n//\t\tfor (int i = repeat - 1; i >= 0; i--) {\n//\t\t buf[i] = ' ';\n//\t\t} \n//\t\treturn new String(buf);\n//\t}\n//\t\n//\tpublic String getOutput() {\n//        return out.toString().trim();\n//    }\n//\n//}","koara.CharStream = function(reader) {\n\tthis.available = 4096;\n\tthis.bufsize = 4096;\n\tthis.tokenBegin = 0;\n\tthis.bufcolumn = [];\n\tthis.bufpos = -1;\n\tthis.bufline = [];\n\tthis.column = 0;\n\tthis.line = 1;\n\tthis.prevCharIsLF;\n\tthis.reader = reader;\n\tthis.buffer = [];\n\tthis.maxNextCharInd = 0;\n\tthis.inBuf = 0;\n\tthis.tabSize = 4;\n}\n\nkoara.CharStream.prototype = {\n\tconstructor: koara.CharStream,\n\t\n\tbeginToken: function() {\n\t\tthis.tokenBegin = -1;\n\t\tvar c = this.readChar();\n\t\tthis.tokenBegin = this.bufpos;\n\t\treturn c;\n\t},\n\n\treadChar: function() {\n\t\tif (this.inBuf > 0) {\n\t\t\t--this.inBuf;\n\t\t\tif (++this.bufpos == this.bufsize) {\n\t\t\t\tthis.bufpos = 0;\n\t\t\t}\n\t\t\treturn this.buffer[this.bufpos];\n\t\t}\n\t\tif (++this.bufpos >= this.maxNextCharInd) {\n\t\t\tthis.fillBuff();\n\t\t}\n\t\tvar c = this.buffer[this.bufpos];\n\t\tthis.updateLineColumn(c);\n\t\treturn c;\n\t},\n\t\n\tfillBuff: function() {\n\t\tif (this.maxNextCharInd == this.available) {\n\t\t\tif (this.available == this.bufsize) {\n\t\t\t\tthis.bufpos = 0;\n\t\t\t\tthis.maxNextCharInd = 0;\n\t\t\t\tif (this.tokenBegin > 2048) {\n\t\t\t\t\tthis.available = this.tokenBegin;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.available = this.bufsize;\n\t\t\t}\n\t\t}\n\t\tvar i;\n\t\ttry {\n\t\t\tif ((i = this.reader.read(this.buffer, this.maxNextCharInd,\n\t\t\t\tthis.available - this.maxNextCharInd)) == -1) {\n\t\t\t\tthrow \"IOException\";\n\t\t\t} else {\n\t\t\t\tthis.maxNextCharInd += i;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t--this.bufpos;\n\t\t\tthis.backup(0);\n\t\t\tif (this.tokenBegin == -1) {\n\t\t\t\tthis.tokenBegin = this.bufpos;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t},\n\t\n\tbackup: function(amount) {\n\t\tthis.inBuf += this.amount;\n\t\tif ((this.bufpos -= this.amount) < 0) {\n\t\t\tthis.bufpos += this.bufsize;\n\t\t}\n\t},\n\t\n\tupdateLineColumn: function(c) {\n\t\tthis.column++;\n\t\tif (this.prevCharIsLF) {\n\t\t\tthis.prevCharIsLF = false;\n\t\t\tthis.column = 1;\n\t\t\tthis.line += this.column;\n\t\t}\n\n\t\tswitch (c) {\n\t\tcase '\\n':\n\t\t\tthis.prevCharIsLF = true;\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tthis.column--;\n\t\t\tthis.column += this.tabSize - this.column % this.tabSize;\n\t\t\tbreak;\n\t\t}\n\t\tthis.bufline[this.bufpos] = this.line;\n\t\tthis.bufcolumn[this.bufpos] = this.column;\n\t},\n\t\n\tgetImage: function() {\n\t\tif (this.bufpos >= this.tokenBegin) {\n\t\t\treturn this.buffer.slice(this.tokenBegin, this.bufpos - this.tokenBegin + 1).join('');\n\t\t} else {\n\t\t\treturn this.buffer.slice(this.tokenBegin, this.bufsize - this.tokenBegin).join('')\n\t\t\t\t\t+ this.buffer.slice(0, this.bufpos + 1).join('');\n\t\t}\n\t}, \n\t\n\tgetBeginColumn: function() {\n\t\treturn this.bufpos in this.bufcolumn ? this.bufcolumn[this.bufpos] : 0;\n\t},\n\t\n\tgetBeginLine: function() {\n\t\treturn this.bufpos in this.bufline ? this.bufline[this.bufpos] : 0;\n\t},\n\t\n\tgetEndColumn: function() {\n\t\treturn this.tokenBegin in this.bufcolumn ? this.bufcolumn[this.tokenBegin] : 0;\n\t},\n\t\n\tgetEndLine: function() {\n\t\treturn this.tokenBegin in this.bufline ? this.bufline[this.tokenBegin] : 0;\n\t}\n}\t\t\n\t\t\n\n\n","koara.LookaheadSuccess = function() {}\n\nkoara.LookaheadSuccess.prototype = {\n\tconstructor: koara.LookaheadSuccess\n\t\t\n}","koara.Parser = function() {\n\tthis.lookAheadSuccess = new koara.LookaheadSuccess();\n\tthis.modules = ['paragraphs', 'headings', 'lists', 'links', 'images', 'formatting', 'blockquotes', 'code'];\n}\n\nkoara.Parser.prototype = {\n\tconstructor: koara.Parser,\n\t\n\tparse: function(text) {\n\t\treturn this.parseReader(new koara.StringReader(text))\n\t},\n\t\n\tparseReader: function(reader) {\n\t\tthis.cs = new koara.CharStream(reader);\n\t\tthis.tm = new koara.TokenManager(this.cs);\n\t\ttoken = new koara.Token();\n\t\ttree = new koara.TreeState();\n\t\tthis.nextTokenKind = -1;\n\t\t\n\t\tdocument = new koara.Document();\n\t\ttree.openScope();\n//\t\twhile(this.getNextTokenKind == EOL)) {\n//\t\t\tthis.consumeToken(EOL);\n//\t\t}\n//\t\tthis.whiteSpace();\n//\t\tif (this.hasAnyBlockElementsAhead()) {\n//\t\t\tthis.blockElement();\n//\t\t\twhile (this.blockAhead(0)) {\n//\t\t\t\twhile (this.getNextTokenKind() == EOL) {\n//                  this.consumeToken(EOL);\n//                  this.whiteSpace();\n//\t\t\t\t}\n//                this.blockElement();\n//          }\n//          while (this.getNextTokenKind() == EOL) {\n//              this.consumeToken(EOL);\n//          }\n//          this.whiteSpace();\n//      }\n//      this.consumeToken(EOF);\n//      this.tree.closeScope(document);\n      return document;\n\t}\n}\n\n\n\n\n//    }\n//\n//    private void blockElement() {\n//        currentBlockLevel++;\n//        if (modules.contains(Module.HEADINGS) && headingAhead(1)) {\n//            heading();\n//        } else if (modules.contains(Module.BLOCKQUOTES) && getNextTokenKind() == GT) {\n//            blockQuote();\n//        } else if (modules.contains(Module.LISTS) && getNextTokenKind() == DASH) {\n//            unorderedList();\n//        } else if (modules.contains(Module.LISTS) && hasOrderedListAhead()) {\n//            orderedList();\n//        } else if (modules.contains(Module.CODE) && hasFencedCodeBlockAhead()) {\n//            fencedCodeBlock();\n//        } else {\n//            paragraph();\n//        }\n//        currentBlockLevel--;\n//    }\n//\n//    private void heading() {\n//        Heading heading = new Heading();\n//        tree.openScope();\n//        int headingLevel = 0;\n//\n//        while (getNextTokenKind() == EQ) {\n//            consumeToken(EQ);\n//            headingLevel++;\n//        }\n//        whiteSpace();\n//        while (headingHasInlineElementsAhead()) {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.FORMATTING) && hasStrongAhead()) {\n//                strong();\n//            } else if (modules.contains(Module.FORMATTING) && hasEmAhead()) {\n//                em();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else {\n//                looseChar();\n//            }\n//        }\n//        heading.setValue(headingLevel);\n//        tree.closeScope(heading);\n//    }\n//\n//    private void blockQuote() {\n//        BlockQuote blockQuote = new BlockQuote();\n//        tree.openScope();\n//        currentQuoteLevel++;\n//        consumeToken(GT);\n//        while (blockQuoteHasEmptyLineAhead()) {\n//            blockQuoteEmptyLine();\n//        }\n//        whiteSpace();\n//        if (blockQuoteHasAnyBlockElementseAhead()) {\n//            blockElement();\n//            while (blockAhead(0)) {\n//                while (getNextTokenKind() == EOL) {\n//                    consumeToken(EOL);\n//                    whiteSpace();\n//                    blockQuotePrefix();\n//                }\n//                blockElement();\n//            }\n//        }\n//        while (hasBlockQuoteEmptyLinesAhead()) {\n//            blockQuoteEmptyLine();\n//        }\n//        currentQuoteLevel--;\n//        tree.closeScope(blockQuote);\n//    }\n//\n//    private void blockQuotePrefix() {\n//        int i = 0;\n//        do {\n//            consumeToken(GT);\n//            whiteSpace();\n//        } while (++i < currentQuoteLevel);\n//    }\n//\n//    private void blockQuoteEmptyLine() {\n//        consumeToken(EOL);\n//        whiteSpace();\n//        do {\n//            consumeToken(GT);\n//            whiteSpace();\n//        } while (getNextTokenKind() == GT);\n//    }\n//\n//    private void unorderedList() {\n//        ListBlock list = new ListBlock(false);\n//        tree.openScope();\n//        int listBeginColumn = unorderedListItem();\n//        while (listItemAhead(listBeginColumn, false)) {\n//            while (getNextTokenKind() == EOL) {\n//                consumeToken(EOL);\n//            }\n//            whiteSpace();\n//            if (currentQuoteLevel > 0) {\n//                blockQuotePrefix();\n//            }\n//            unorderedListItem();\n//        }\n//        tree.closeScope(list);\n//    }\n//\n//    private int unorderedListItem() {\n//        ListItem listItem = new ListItem();\n//        tree.openScope();\n//\n//        Token t = consumeToken(DASH);\n//        whiteSpace();\n//        if (listItemHasInlineElements()) {\n//            blockElement();\n//            while (blockAhead(t.beginColumn)) {\n//                while (getNextTokenKind() == EOL) {\n//                    consumeToken(EOL);\n//                    whiteSpace();\n//                    if (currentQuoteLevel > 0) {\n//                        blockQuotePrefix();\n//                    }\n//                }\n//                blockElement();\n//            }\n//        }\n//        tree.closeScope(listItem);\n//        return t.beginColumn;\n//    }\n//\n//    private void orderedList() {\n//        ListBlock list = new ListBlock(true);\n//        tree.openScope();\n//        int listBeginColumn = orderedListItem();\n//        while (listItemAhead(listBeginColumn, true)) {\n//            while (getNextTokenKind() == EOL) {\n//                consumeToken(EOL);\n//            }\n//            whiteSpace();\n//            if (currentQuoteLevel > 0) {\n//                blockQuotePrefix();\n//            }\n//            orderedListItem();\n//        }\n//        tree.closeScope(list);\n//    }\n//\n//    private int orderedListItem() {\n//        ListItem listItem = new ListItem();\n//        tree.openScope();\n//        Token t = consumeToken(DIGITS);\n//        consumeToken(DOT);\n//        whiteSpace();\n//        if (listItemHasInlineElements()) {\n//            blockElement();\n//            while (blockAhead(t.beginColumn)) {\n//                while (getNextTokenKind() == EOL) {\n//                    consumeToken(EOL);\n//                    whiteSpace();\n//                    if (currentQuoteLevel > 0) {\n//                        blockQuotePrefix();\n//                    }\n//                }\n//                blockElement();\n//            }\n//        }\n//        listItem.setNumber(Integer.valueOf(t.image));\n//        tree.closeScope(listItem);\n//        return t.beginColumn;\n//    }\n//\n//    private void fencedCodeBlock() {\n//        CodeBlock codeBlock = new CodeBlock();\n//        tree.openScope();\n//        StringBuilder s = new StringBuilder();\n//        int beginColumn = consumeToken(BACKTICK).beginColumn;\n//        do {\n//            consumeToken(BACKTICK);\n//        } while (getNextTokenKind() == BACKTICK);\n//        whiteSpace();\n//        if (getNextTokenKind() == CHAR_SEQUENCE) {\n//            codeBlock.setLanguage(codeLanguage());\n//        }\n//        if (getNextTokenKind() != EOF && !fencesAhead()) {\n//            consumeToken(EOL);\n//            levelWhiteSpace(beginColumn);\n//        }\n//        \n//        while (getNextTokenKind() != EOF && (getNextTokenKind() != EOL || !fencesAhead())) {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case ASTERISK:\n//                s.append(consumeToken(ASTERISK).image);\n//                break;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image);\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case LBRACK:\n//                s.append(consumeToken(LBRACK).image);\n//                break;\n//            case RBRACK:\n//                s.append(consumeToken(RBRACK).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case RPAREN:\n//                s.append(consumeToken(RPAREN).image);\n//                break;\n//            case UNDERSCORE:\n//                s.append(consumeToken(UNDERSCORE).image);\n//                break;\n//            case BACKTICK:\n//                s.append(consumeToken(BACKTICK).image);\n//                break;\n//            default:\n//                if (!nextAfterSpace(EOL, EOF)) {\n//                    switch (getNextTokenKind()) {\n//                    case SPACE:\n//                        s.append(consumeToken(SPACE).image);\n//                        break;\n//                    case TAB:\n//                        consumeToken(TAB);\n//                        s.append(\"    \");\n//                        break;\n//                    }\n//                } else if (!fencesAhead()) {\n//                    consumeToken(EOL);\n//                    s.append(\"\\n\");\n//                    levelWhiteSpace(beginColumn);\n//                }\n//            }\n//        }\n//        if (fencesAhead()) {\n//            consumeToken(EOL);\n//            whiteSpace();\n//            while (getNextTokenKind() == BACKTICK) {\n//                consumeToken(BACKTICK);\n//            }\n//        }\n//        codeBlock.setValue(s.toString());\n//        tree.closeScope(codeBlock);\n//    }\n//\n//    private void paragraph() {\n//        BlockElement paragraph;\n//        if (modules.contains(Module.PARAGRAPHS)) {\n//            paragraph = new Paragraph();\n//        } else {\n//            paragraph = new BlockElement();\n//        }\n//\n//        tree.openScope();\n//        inline();\n//        while (textAhead()) {\n//            lineBreak();\n//            whiteSpace();\n//            if (modules.contains(Module.BLOCKQUOTES)) {\n//                while (getNextTokenKind() == GT) {\n//                    consumeToken(GT);\n//                    whiteSpace();\n//                }\n//            }\n//            inline();\n//        }\n//        tree.closeScope(paragraph);\n//    }\n//\n//    private void text() {\n//        Text text = new Text();\n//        tree.openScope();\n//        StringBuffer s = new StringBuffer();\n//        while (textHasTokensAhead()) {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image.substring(1));\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case RBRACK:\n//                s.append(consumeToken(RBRACK).image);\n//                break;\n//            case RPAREN:\n//                s.append(consumeToken(RPAREN).image);\n//                break;\n//            default:\n//                if (!nextAfterSpace(EOL, EOF)) {\n//                    switch (getNextTokenKind()) {\n//                    case SPACE:\n//                        s.append(consumeToken(SPACE).image);\n//                        break;\n//                    case TAB:\n//                        consumeToken(TAB);\n//                        s.append(\"    \");\n//                        break;\n//                    }\n//                }\n//            }\n//        }\n//        text.setValue(s.toString());\n//        tree.closeScope(text);\n//    }\n//\n//    private void image() {\n//        Image image = new Image();\n//        tree.openScope();\n//        String ref = \"\";\n//        consumeToken(LBRACK);\n//        whiteSpace();\n//        consumeToken(IMAGE_LABEL);\n//        whiteSpace();\n//        while (imageHasAnyElements()) {\n//            if (hasTextAhead()) {\n//                resourceText();\n//            } else {\n//                looseChar();\n//            }\n//        }\n//        whiteSpace();\n//        consumeToken(RBRACK);\n//        if (hasResourceUrlAhead()) {\n//            ref = resourceUrl();\n//        }\n//        image.setValue(ref);\n//        tree.closeScope(image);\n//    }\n//\n//    private void link() {\n//        Link link = new Link();\n//        tree.openScope();\n//        String ref = \"\";\n//        consumeToken(LBRACK);\n//        whiteSpace();\n//        while (linkHasAnyElements()) {\n//            if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.FORMATTING) && hasStrongAhead()) {\n//                strong();\n//            } else if (modules.contains(Module.FORMATTING) && hasEmAhead()) {\n//                em();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else if (hasResourceTextAhead()) {\n//                resourceText();\n//            } else {\n//                looseChar();\n//            }\n//        }\n//        whiteSpace();\n//        consumeToken(RBRACK);\n//        if (hasResourceUrlAhead()) {\n//            ref = resourceUrl();\n//        }\n//        link.setValue(ref);\n//        tree.closeScope(link);\n//    }\n//\n//    private void strong() {\n//        Strong strong = new Strong();\n//        tree.openScope();\n//        consumeToken(ASTERISK);\n//        while (strongHasElements()) {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImage()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && multilineAhead(BACKTICK)) {\n//                codeMultiline();\n//            } else if (strongEmWithinStrongAhead()) {\n//                emWithinStrong();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                case UNDERSCORE:\n//                    tree.addSingleValue(new Text(), consumeToken(UNDERSCORE));\n//                    break;\n//                }\n//            }\n//        }\n//        consumeToken(ASTERISK);\n//        tree.closeScope(strong);\n//    }\n//\n//    private void em() {\n//        Em em = new Em();\n//        tree.openScope();\n//        consumeToken(UNDERSCORE);\n//        while (emHasElements()) {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImage()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else if (emHasStrongWithinEm()) {\n//                strongWithinEm();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case ASTERISK:\n//                    tree.addSingleValue(new Text(), consumeToken(ASTERISK));\n//                    break;\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                }\n//            }\n//        }\n//        consumeToken(UNDERSCORE);\n//        tree.closeScope(em);\n//    }\n//\n//    private void code() {\n//        Code code = new Code();\n//        tree.openScope();\n//        consumeToken(BACKTICK);\n//        codeText();\n//        consumeToken(BACKTICK);\n//        tree.closeScope(code);\n//    }\n//\n//    private void codeText() {\n//        Text text = new Text();\n//        tree.openScope();\n//        StringBuffer s = new StringBuffer();\n//        do {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case ASTERISK:\n//                s.append(consumeToken(ASTERISK).image);\n//                break;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image);\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case LBRACK:\n//                s.append(consumeToken(LBRACK).image);\n//                break;\n//            case RBRACK:\n//                s.append(consumeToken(RBRACK).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case RPAREN:\n//                s.append(consumeToken(RPAREN).image);\n//                break;\n//            case UNDERSCORE:\n//                s.append(consumeToken(UNDERSCORE).image);\n//                break;\n//            default:\n//                if (!nextAfterSpace(EOL, EOF)) {\n//                    switch (getNextTokenKind()) {\n//                    case SPACE:\n//                        s.append(consumeToken(SPACE).image);\n//                        break;\n//                    case TAB:\n//                        consumeToken(TAB);\n//                        s.append(\"    \");\n//                        break;\n//                    }\n//                }\n//            }\n//        } while (codeTextHasAnyTokenAhead());\n//        text.setValue(s.toString());\n//        tree.closeScope(text);\n//    }\n//\n//    private void looseChar() {\n//        Text text = new Text();\n//        tree.openScope();\n//        switch (getNextTokenKind()) {\n//        case ASTERISK:\n//            text.setValue(consumeToken(ASTERISK).image);\n//            break;\n//        case BACKTICK:\n//            text.setValue(consumeToken(BACKTICK).image);\n//            break;\n//        case LBRACK:\n//            text.setValue(consumeToken(LBRACK).image);\n//            break;\n//        case UNDERSCORE:\n//            text.setValue(consumeToken(UNDERSCORE).image);\n//            break;\n//        }\n//        tree.closeScope(text);\n//    }\n//\n//    private void lineBreak() {\n//        LineBreak linebreak = new LineBreak();\n//        tree.openScope();\n//        while (getNextTokenKind() == SPACE || getNextTokenKind() == TAB) {\n//            consumeToken(getNextTokenKind());\n//        }\n//        consumeToken(EOL);\n//        tree.closeScope(linebreak);\n//    }\n//\n//    private void levelWhiteSpace(int threshold) {\n//        int currentPos = 1;\n//        while (getNextTokenKind() == GT) {\n//            consumeToken(getNextTokenKind());\n//        }\n//        while ((getNextTokenKind() == SPACE || getNextTokenKind() == TAB) && currentPos < (threshold - 1)) {\n//            currentPos = consumeToken(getNextTokenKind()).beginColumn;\n//        }\n//    }\n//\n//    private String codeLanguage() {\n//        StringBuilder s = new StringBuilder();\n//        do {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case ASTERISK:\n//                s.append(consumeToken(ASTERISK).image);\n//                break;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case BACKTICK:\n//                s.append(consumeToken(BACKTICK).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image);\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case LBRACK:\n//                s.append(consumeToken(LBRACK).image);\n//                break;\n//            case RBRACK:\n//                s.append(consumeToken(RBRACK).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case RPAREN:\n//                s.append(consumeToken(RPAREN).image);\n//                break;\n//            case UNDERSCORE:\n//                s.append(consumeToken(UNDERSCORE).image);\n//                break;\n//            case SPACE:\n//                s.append(consumeToken(SPACE).image);\n//                break;\n//            case TAB:\n//                s.append(\"    \");\n//                break;\n//            default:\n//                break;\n//            }\n//        } while (getNextTokenKind() != EOL && getNextTokenKind() != EOF);\n//        return s.toString();\n//    }\n//\n//    private void inline() {\n//        do {\n//            if (hasInlineTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.FORMATTING) && multilineAhead(ASTERISK)) {\n//                strongMultiline();\n//            } else if (modules.contains(Module.FORMATTING) && multilineAhead(UNDERSCORE)) {\n//                emMultiline();\n//            } else if (modules.contains(Module.CODE) && multilineAhead(BACKTICK)) {\n//                codeMultiline();\n//            } else {\n//                looseChar();\n//            }\n//        } while (hasInlineElementAhead());\n//    }\n//\n//    private void resourceText() {\n//        Text text = new Text();\n//        tree.openScope();\n//        StringBuilder s = new StringBuilder();\n//        do {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image.substring(1));\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case RPAREN:\n//                s.append(consumeToken(RPAREN).image);\n//                break;\n//            default:\n//                if (!nextAfterSpace(RBRACK)) {\n//                    switch (getNextTokenKind()) {\n//                    case SPACE:\n//                        s.append(consumeToken(SPACE).image);\n//                        break;\n//                    case TAB:\n//                        consumeToken(TAB);\n//                        s.append(\"    \");\n//                        break;\n//                    }\n//                }\n//            }\n//        } while (resourceHasElementAhead());\n//        text.setValue(s.toString());\n//        tree.closeScope(text);\n//    }\n//\n//    private String resourceUrl() {\n//        consumeToken(LPAREN);\n//        whiteSpace();\n//        String ref = resourceUrlText();\n//        whiteSpace();\n//        consumeToken(RPAREN);\n//        return ref;\n//    }\n//\n//    private String resourceUrlText() {\n//        StringBuilder s = new StringBuilder();\n//        while (resourceTextHasElementsAhead()) {\n//            switch (getNextTokenKind()) {\n//        \tcase CHAR_SEQUENCE:\n//        \t\ts.append(consumeToken(CHAR_SEQUENCE).image);\n//        \t\tbreak;\n//            case ASTERISK:\n//                s.append(consumeToken(ASTERISK).image);\n//                break;\n//            case BACKSLASH:\n//                s.append(consumeToken(BACKSLASH).image);\n//                break;\n//            case BACKTICK:\n//                s.append(consumeToken(BACKTICK).image);\n//                break;\n//            case COLON:\n//                s.append(consumeToken(COLON).image);\n//                break;\n//            case DASH:\n//                s.append(consumeToken(DASH).image);\n//                break;\n//            case DIGITS:\n//                s.append(consumeToken(DIGITS).image);\n//                break;\n//            case DOT:\n//                s.append(consumeToken(DOT).image);\n//                break;\n//            case EQ:\n//                s.append(consumeToken(EQ).image);\n//                break;\n//            case ESCAPED_CHAR:\n//                s.append(consumeToken(ESCAPED_CHAR).image.substring(1));\n//                break;\n//            case IMAGE_LABEL:\n//                s.append(consumeToken(IMAGE_LABEL).image);\n//                break;\n//            case GT:\n//                s.append(consumeToken(GT).image);\n//                break;\n//            case LBRACK:\n//                s.append(consumeToken(LBRACK).image);\n//                break;\n//            case LPAREN:\n//                s.append(consumeToken(LPAREN).image);\n//                break;\n//            case LT:\n//                s.append(consumeToken(LT).image);\n//                break;\n//            case RBRACK:\n//                s.append(consumeToken(RBRACK).image);\n//                break;\n//            case UNDERSCORE:\n//                s.append(consumeToken(UNDERSCORE).image);\n//                break;\n//            default:\n//                if (!nextAfterSpace(RPAREN)) {\n//                    switch (getNextTokenKind()) {\n//                    case SPACE:\n//                        s.append(consumeToken(SPACE).image);\n//                        break;\n//                    case TAB:\n//                        consumeToken(TAB);\n//                        s.append(\"    \");\n//                        break;\n//                    }\n//                }\n//            }\n//        }\n//        return s.toString();\n//    }\n//\n//    private void strongMultiline() {\n//        Strong strong = new Strong();\n//        tree.openScope();\n//        consumeToken(ASTERISK);\n//        strongMultilineContent();\n//        while (textAhead()) {\n//            lineBreak();\n//            strongMultilineContent();\n//        }\n//        consumeToken(ASTERISK);\n//        tree.closeScope(strong);\n//    }\n//\n//    private void strongMultilineContent() {\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else if (hasEmWithinStrongMultiline()) {\n//                emWithinStrongMultiline();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                case UNDERSCORE:\n//                    tree.addSingleValue(new Text(), consumeToken(UNDERSCORE));\n//                    break;\n//                }\n//            }\n//        } while (strongMultilineHasElementsAhead());\n//    }\n//\n//    private void strongWithinEmMultiline() {\n//        Strong strong = new Strong();\n//        tree.openScope();\n//        consumeToken(ASTERISK);\n//        strongWithinEmMultilineContent();\n//        while (textAhead()) {\n//            lineBreak();\n//            strongWithinEmMultilineContent();\n//        }\n//        consumeToken(ASTERISK);\n//        tree.closeScope(strong);\n//    }\n//\n//    private void strongWithinEmMultilineContent() {\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                case UNDERSCORE:\n//                    tree.addSingleValue(new Text(), consumeToken(UNDERSCORE));\n//                    break;\n//                }\n//            }\n//        } while (strongWithinEmMultilineHasElementsAhead());\n//    }\n//\n//    private void strongWithinEm() {\n//        Strong strong = new Strong();\n//        tree.openScope();\n//        consumeToken(ASTERISK);\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                case UNDERSCORE:\n//                    tree.addSingleValue(new Text(), consumeToken(UNDERSCORE));\n//                    break;\n//                }\n//            }\n//        } while (strongWithinEmHasElementsAhead());\n//        consumeToken(ASTERISK);\n//        tree.closeScope(strong);\n//    }\n//\n//    private void emMultiline() {\n//        Em em = new Em();\n//        tree.openScope();\n//        consumeToken(UNDERSCORE);\n//        emMultilineContent();\n//        while (textAhead()) {\n//            lineBreak();\n//            emMultilineContent();\n//        }\n//        consumeToken(UNDERSCORE);\n//        tree.closeScope(em);\n//    }\n//\n//    private void emMultilineContent() {\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && multilineAhead(BACKTICK)) {\n//                codeMultiline();\n//            } else if (hasStrongWithinEmMultilineAhead()) {\n//                strongWithinEmMultiline();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case ASTERISK:\n//                    tree.addSingleValue(new Text(), consumeToken(ASTERISK));\n//                    break;\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                }\n//            }\n//        } while (emMultilineContentHasElementsAhead());\n//    }\n//\n//    private void emWithinStrongMultiline() {\n//        Em em = new Em();\n//        tree.openScope();\n//        consumeToken(UNDERSCORE);\n//        emWithinStrongMultilineContent();\n//        while (textAhead()) {\n//            lineBreak();\n//            emWithinStrongMultilineContent();\n//        }\n//        consumeToken(UNDERSCORE);\n//        tree.closeScope(em);\n//    }\n//\n//    private void emWithinStrongMultilineContent() {\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case ASTERISK:\n//                    tree.addSingleValue(new Text(), consumeToken(ASTERISK));\n//                    break;\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                }\n//            }\n//        } while (emWithinStrongMultilineContentHasElementsAhaed());\n//    }\n//\n//    private void emWithinStrong() {\n//        Em em = new Em();\n//        tree.openScope();\n//        consumeToken(UNDERSCORE);\n//        do {\n//            if (hasTextAhead()) {\n//                text();\n//            } else if (modules.contains(Module.IMAGES) && hasImageAhead()) {\n//                image();\n//            } else if (modules.contains(Module.LINKS) && hasLinkAhead()) {\n//                link();\n//            } else if (modules.contains(Module.CODE) && hasCodeAhead()) {\n//                code();\n//            } else {\n//                switch (getNextTokenKind()) {\n//                case ASTERISK:\n//                    tree.addSingleValue(new Text(), consumeToken(ASTERISK));\n//                    break;\n//                case BACKTICK:\n//                    tree.addSingleValue(new Text(), consumeToken(BACKTICK));\n//                    break;\n//                case LBRACK:\n//                    tree.addSingleValue(new Text(), consumeToken(LBRACK));\n//                    break;\n//                }\n//            }\n//        } while (emWithinStrongHasElementsAhead());\n//        consumeToken(UNDERSCORE);\n//        tree.closeScope(em);\n//    }\n//\n//    private void codeMultiline() {\n//        Code code = new Code();\n//        tree.openScope();\n//        consumeToken(BACKTICK);\n//        codeText();\n//        while (textAhead()) {\n//            lineBreak();\n//            whiteSpace();\n//            while (getNextTokenKind() == GT) {\n//                consumeToken(GT);\n//                whiteSpace();\n//            }\n//            codeText();\n//        }\n//        consumeToken(BACKTICK);\n//        tree.closeScope(code);\n//    }\n//\n//    private void whiteSpace() {\n//        while (getNextTokenKind() == SPACE || getNextTokenKind() == TAB) {\n//            consumeToken(getNextTokenKind());\n//        }\n//    }\n//\n//    private boolean hasAnyBlockElementsAhead() {\n//        try {\n//            lookAhead = 1;\n//            lastPosition = scanPosition = token;\n//            return !scanMoreBlockElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean blockAhead(int blockBeginColumn) {\n//        int quoteLevel;\n//\n//        if (getNextTokenKind() == EOL) {\n//            Token t;\n//            int i = 2;\n//            quoteLevel = 0;\n//            do {\n//                quoteLevel = 0;\n//                do {\n//                    t = getToken(i++);\n//                    if (t.kind == GT) {\n//                        if (t.beginColumn == 1 && currentBlockLevel > 0 && currentQuoteLevel == 0) {\n//                            return false;\n//                        }\n//                        quoteLevel++;\n//                    }\n//                } while (t.kind == GT || t.kind == SPACE || t.kind == TAB);\n//                if (quoteLevel > currentQuoteLevel) {\n//                    return true;\n//                }\n//                if (quoteLevel < currentQuoteLevel) {\n//                    return false;\n//                }\n//            } while (t.kind == EOL);\n//            return t.kind != EOF && (currentBlockLevel == 0 || t.beginColumn >= blockBeginColumn + 2);\n//        }\n//        return false;\n//    }\n//\n//    private boolean multilineAhead(Integer token) {\n//        if (getNextTokenKind() == token && getToken(2).kind != token && getToken(2).kind != EOL) {\n//\n//            for (int i = 2;; i++) {\n//                Token t = getToken(i);\n//                if (t.kind == token) {\n//                    return true;\n//                } else if (t.kind == EOL) {\n//                    i = skip(i + 1, SPACE, TAB);\n//                    int quoteLevel = newQuoteLevel(i);\n//                    if (quoteLevel == currentQuoteLevel) {\n//                        i = skip(i, SPACE, TAB, GT);\n//                        if (getToken(i).kind == token || getToken(i).kind == EOL || getToken(i).kind == DASH\n//                                || (getToken(i).kind == DIGITS && getToken(i + 1).kind == DOT)\n//                                || (getToken(i).kind == BACKTICK && getToken(i + 1).kind == BACKTICK\n//                                        && getToken(i + 2).kind == BACKTICK)\n//                                || headingAhead(i)) {\n//                            return false;\n//                        }\n//                    } else {\n//                        return false;\n//                    }\n//                } else if (t.kind == EOF) {\n//                    return false;\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean fencesAhead() {\n//        if (getNextTokenKind() == EOL) {\n//            int i = skip(2, SPACE, TAB, GT);\n//            if (getToken(i).kind == BACKTICK && getToken(i + 1).kind == BACKTICK && getToken(i + 2).kind == BACKTICK) {\n//                i = skip(i + 3, SPACE, TAB);\n//                return getToken(i).kind == EOL || getToken(i).kind == EOF;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean headingAhead(int offset) {\n//        if (getToken(offset).kind == EQ) {\n//            int heading = 1;\n//            for (int i = (offset + 1);; i++) {\n//                if (getToken(i).kind != EQ) {\n//                    return true;\n//                }\n//                if (++heading > 6) {\n//                    return false;\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean listItemAhead(int listBeginColumn, boolean ordered) {\n//        if (getNextTokenKind() == EOL) {\n//            for (int i = 2, eol = 1;; i++) {\n//                Token t = getToken(i);\n//\n//                if (t.kind == EOL && ++eol > 2) {\n//                    return false;\n//                } else if (t.kind != SPACE && t.kind != TAB && t.kind != GT && t.kind != EOL) {\n//                    if (ordered) {\n//                        return (t.kind == DIGITS && getToken(i + 1).kind == DOT && t.beginColumn >= listBeginColumn);\n//                    }\n//                    return t.kind == DASH && t.beginColumn >= listBeginColumn;\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean textAhead() {\n//        if (getNextTokenKind() == EOL && getToken(2).kind != EOL) {\n//            int i = skip(2, SPACE, TAB);\n//            int quoteLevel = newQuoteLevel(i);\n//            if (quoteLevel == currentQuoteLevel || !modules.contains(Module.BLOCKQUOTES)) {\n//                i = skip(i, SPACE, TAB, GT);\n//\n//                Token t = getToken(i);\n//                return getToken(i).kind != EOL && !(modules.contains(Module.LISTS) && t.kind == DASH)\n//                        && !(modules.contains(Module.LISTS) && t.kind == DIGITS && getToken(i + 1).kind == DOT)\n//                        && !(getToken(i).kind == BACKTICK && getToken(i + 1).kind == BACKTICK\n//                                && getToken(i + 2).kind == BACKTICK)\n//                        && !(modules.contains(Module.HEADINGS) && headingAhead(i));\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean nextAfterSpace(Integer... tokens) {\n//        int i = skip(1, SPACE, TAB);\n//        return Arrays.asList(tokens).contains(getToken(i).kind);\n//    }\n//\n//    private int newQuoteLevel(int offset) {\n//        int quoteLevel = 0;\n//        for (int i = offset;; i++) {\n//            Token t = getToken(i);\n//            if (t.kind == GT) {\n//                quoteLevel++;\n//            } else if (t.kind != SPACE && t.kind != TAB) {\n//                return quoteLevel;\n//            }\n//\n//        }\n//    }\n//\n//    private int skip(int offset, Integer... tokens) {\n//        for (int i = offset;; i++) {\n//            Token t = getToken(i);\n//            if (!Arrays.asList(tokens).contains(t.kind) || t.kind == EOF) {\n//                return i;\n//            }\n//        }\n//    }\n//\n//    private boolean hasOrderedListAhead() {\n//        lookAhead = 2;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanToken(DIGITS) && !scanToken(DOT);\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasFencedCodeBlockAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanFencedCodeBlock();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean headingHasInlineElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            Token xsp = scanPosition;\n//            if (scanTextTokens()) {\n//                scanPosition = xsp;\n//                if (scanImage()) {\n//                    scanPosition = xsp;\n//                    if (scanLink()) {\n//                        scanPosition = xsp;\n//                        if (scanStrong()) {\n//                            scanPosition = xsp;\n//                            if (scanEm()) {\n//                                scanPosition = xsp;\n//                                if (scanCode()) {\n//                                    scanPosition = xsp;\n//                                    if (scanLooseChar()) {\n//                                        return false;\n//                                    }\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//            return true;\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasTextAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanTextTokens();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasImageAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanImage();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean blockQuoteHasEmptyLineAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanBlockQuoteEmptyLine();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasStrongAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrong();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasEmAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEm();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasCodeAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanCode();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean blockQuoteHasAnyBlockElementseAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanMoreBlockElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasBlockQuoteEmptyLinesAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanBlockQuoteEmptyLines();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean listItemHasInlineElements() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanMoreBlockElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasInlineTextAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanTextTokens();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasInlineElementAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanInlineElement();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean imageHasAnyElements() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanImageElement();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasResourceTextAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanResourceElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean linkHasAnyElements() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanLinkElement();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasResourceUrlAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanResourceUrl();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean resourceHasElementAhead() {\n//        lookAhead = 2;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanResourceElement();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean resourceTextHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanResourceTextElement();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasEmWithinStrongMultiline() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmWithinStrongMultiline();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean strongMultilineHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongMultilineElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean strongWithinEmMultilineHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongWithinEmMultilineElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasImage() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanImage();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasLinkAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanLink();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean strongEmWithinStrongAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmWithinStrong();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean strongHasElements() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean strongWithinEmHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongWithinEmElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean hasStrongWithinEmMultilineAhead() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongWithinEmMultiline();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean emMultilineContentHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmMultilineContentElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean emWithinStrongMultilineContentHasElementsAhaed() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmWithinStrongMultilineContent();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean emHasStrongWithinEm() {\n//        lookAhead = 2147483647;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanStrongWithinEm();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean emHasElements() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean emWithinStrongHasElementsAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanEmWithinStrongElements();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean codeTextHasAnyTokenAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanCodeTextTokens();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean textHasTokensAhead() {\n//        lookAhead = 1;\n//        lastPosition = scanPosition = token;\n//        try {\n//            return !scanText();\n//        } catch (LookaheadSuccess ls) {\n//            return true;\n//        }\n//    }\n//\n//    private boolean scanLooseChar() {\n//        Token xsp = scanPosition;\n//        if (scanToken(ASTERISK)) {\n//            scanPosition = xsp;\n//            if (scanToken(BACKTICK)) {\n//                scanPosition = xsp;\n//                if (scanToken(LBRACK)) {\n//                    scanPosition = xsp;\n//                    return scanToken(UNDERSCORE);\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanText() {\n//        Token xsp = scanPosition;\n//        if (scanToken(BACKSLASH)) {\n//            scanPosition = xsp;\n//            if (scanToken(CHAR_SEQUENCE)) {\n//                scanPosition = xsp;\n//                if (scanToken(COLON)) {\n//                    scanPosition = xsp;\n//                    if (scanToken(DASH)) {\n//                        scanPosition = xsp;\n//                        if (scanToken(DIGITS)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(DOT)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(EQ)) {\n//                                    scanPosition = xsp;\n//                                    if (scanToken(ESCAPED_CHAR)) {\n//                                        scanPosition = xsp;\n//                                        if (scanToken(GT)) {\n//                                            scanPosition = xsp;\n//                                            if (scanToken(IMAGE_LABEL)) {\n//                                                scanPosition = xsp;\n//                                                if (scanToken(LPAREN)) {\n//                                                    scanPosition = xsp;\n//                                                    if (scanToken(LT)) {\n//                                                        scanPosition = xsp;\n//                                                        if (scanToken(RBRACK)) {\n//                                                            scanPosition = xsp;\n//                                                            if (scanToken(RPAREN)) {\n//                                                                scanPosition = xsp;\n//                                                                lookingAhead = true;\n//                                                                semanticLookAhead = !nextAfterSpace(EOL, EOF);\n//                                                                lookingAhead = false;\n//                                                                return (!semanticLookAhead || scanWhitspaceToken());\n//                                                            }\n//                                                        }\n//                                                    }\n//                                                }\n//                                            }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanTextTokens() {\n//        if (scanText()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanText()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanCodeTextTokens() {\n//        Token xsp = scanPosition;\n//        if (scanToken(ASTERISK)) {\n//            scanPosition = xsp;\n//            if (scanToken(BACKSLASH)) {\n//                scanPosition = xsp;\n//                if (scanToken(CHAR_SEQUENCE)) {\n//                    scanPosition = xsp;\n//                    if (scanToken(COLON)) {\n//                        scanPosition = xsp;\n//                        if (scanToken(DASH)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(DIGITS)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(DOT)) {\n//                                    scanPosition = xsp;\n//                                    if (scanToken(EQ)) {\n//                                        scanPosition = xsp;\n//                                        if (scanToken(ESCAPED_CHAR)) {\n//                                            scanPosition = xsp;\n//                                            if (scanToken(IMAGE_LABEL)) {\n//                                                scanPosition = xsp;\n//                                                if (scanToken(LT)) {\n//                                                    scanPosition = xsp;\n//                                                    if (scanToken(LBRACK)) {\n//                                                        scanPosition = xsp;\n//                                                        if (scanToken(RBRACK)) {\n//                                                            scanPosition = xsp;\n//                                                            if (scanToken(LPAREN)) {\n//                                                                scanPosition = xsp;\n//                                                                if (scanToken(GT)) {\n//                                                                    scanPosition = xsp;\n//                                                                    if (scanToken(RPAREN)) {\n//                                                                        scanPosition = xsp;\n//                                                                        if (scanToken(UNDERSCORE)) {\n//                                                                            scanPosition = xsp;\n//                                                                            lookingAhead = true;\n//                                                                            semanticLookAhead = !nextAfterSpace(EOL,\n//                                                                                    EOF);\n//                                                                            lookingAhead = false;\n//                                                                            return (!semanticLookAhead\n//                                                                                    || scanWhitspaceToken());\n//                                                                        }\n//                                                                    }\n//                                                                }\n//                                                            }\n//                                                        }\n//                                                    }\n//                                                }\n//                                            }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanCode() {\n//        return scanToken(BACKTICK) || scanCodeTextTokensAhead() || scanToken(BACKTICK);\n//    }\n//\n//    private boolean scanCodeMultiline() {\n//        if (scanToken(BACKTICK) || scanCodeTextTokensAhead()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (hasCodeTextOnNextLineAhead()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(BACKTICK);\n//    }\n//\n//    private boolean scanCodeTextTokensAhead() {\n//        if (scanCodeTextTokens()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanCodeTextTokens()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean hasCodeTextOnNextLineAhead() {\n//        if (scanWhitespaceTokenBeforeEol()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanToken(GT)) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanCodeTextTokensAhead();\n//    }\n//\n//    private boolean scanWhitspaceTokens() {\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanWhitspaceToken()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanWhitespaceTokenBeforeEol() {\n//        return scanWhitspaceTokens() || scanToken(EOL);\n//    }\n//\n//    private boolean scanEmWithinStrongElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanToken(ASTERISK)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(BACKTICK)) {\n//                                scanPosition = xsp;\n//                                return scanToken(LBRACK);\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanEmWithinStrong() {\n//        if (scanToken(UNDERSCORE) || scanEmWithinStrongElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanEmWithinStrongElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(UNDERSCORE);\n//    }\n//\n//    private boolean scanEmElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanStrongWithinEm()) {\n//                            scanPosition = xsp;\n//                            if (scanToken(ASTERISK)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(BACKTICK)) {\n//                                    scanPosition = xsp;\n//                                    return scanToken(LBRACK);\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanEm() {\n//        if (scanToken(UNDERSCORE) || scanEmElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanEmElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(UNDERSCORE);\n//    }\n//\n//    private boolean scanEmWithinStrongMultilineContent() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanToken(ASTERISK)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(BACKTICK)) {\n//                                scanPosition = xsp;\n//                                return scanToken(LBRACK);\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean hasNoEmWithinStrongMultilineContentAhead() {\n//        if (scanEmWithinStrongMultilineContent()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanEmWithinStrongMultilineContent()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanEmWithinStrongMultiline() {\n//        if (scanToken(UNDERSCORE) || hasNoEmWithinStrongMultilineContentAhead()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanWhitespaceTokenBeforeEol() || hasNoEmWithinStrongMultilineContentAhead()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(UNDERSCORE);\n//    }\n//\n//    private boolean scanEmMultilineContentElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    lookingAhead = true;\n//                    semanticLookAhead = multilineAhead(BACKTICK);\n//                    lookingAhead = false;\n//                    if (!semanticLookAhead || scanCodeMultiline()) {\n//                        scanPosition = xsp;\n//                        if (scanStrongWithinEmMultiline()) {\n//                            scanPosition = xsp;\n//                            if (scanToken(ASTERISK)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(BACKTICK)) {\n//                                    scanPosition = xsp;\n//                                    return scanToken(LBRACK);\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanStrongWithinEmElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanToken(BACKTICK)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(LBRACK)) {\n//                                scanPosition = xsp;\n//                                return scanToken(UNDERSCORE);\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanStrongWithinEm() {\n//        if (scanToken(ASTERISK) || scanStrongWithinEmElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanStrongWithinEmElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(ASTERISK);\n//    }\n//\n//    private boolean scanStrongElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    lookingAhead = true;\n//                    semanticLookAhead = multilineAhead(BACKTICK);\n//                    lookingAhead = false;\n//                    if (!semanticLookAhead || scanCodeMultiline()) {\n//                        scanPosition = xsp;\n//                        if (scanEmWithinStrong()) {\n//                            scanPosition = xsp;\n//                            if (scanToken(BACKTICK)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(LBRACK)) {\n//                                    scanPosition = xsp;\n//                                    return scanToken(UNDERSCORE);\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanStrong() {\n//        if (scanToken(ASTERISK) || scanStrongElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanStrongElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(ASTERISK);\n//    }\n//\n//    private boolean scanStrongWithinEmMultilineElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanToken(BACKTICK)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(LBRACK)) {\n//                                scanPosition = xsp;\n//                                return scanToken(UNDERSCORE);\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanForMoreStrongWithinEmMultilineElements() {\n//        if (scanStrongWithinEmMultilineElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanStrongWithinEmMultilineElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanStrongWithinEmMultiline() {\n//        if (scanToken(ASTERISK) || scanForMoreStrongWithinEmMultilineElements()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanWhitespaceTokenBeforeEol() || scanForMoreStrongWithinEmMultilineElements()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return scanToken(ASTERISK);\n//    }\n//\n//    private boolean scanStrongMultilineElements() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanEmWithinStrongMultiline()) {\n//                            scanPosition = xsp;\n//                            if (scanToken(BACKTICK)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(LBRACK)) {\n//                                    scanPosition = xsp;\n//                                    return scanToken(UNDERSCORE);\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanResourceTextElement() {\n//        Token xsp = scanPosition;\n//        if (scanToken(ASTERISK)) {\n//            scanPosition = xsp;\n//            if (scanToken(BACKSLASH)) {\n//                scanPosition = xsp;\n//                if (scanToken(BACKTICK)) {\n//                    scanPosition = xsp;\n//                    if (scanToken(CHAR_SEQUENCE)) {\n//                        scanPosition = xsp;\n//                        if (scanToken(COLON)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(DASH)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(DIGITS)) {\n//                                    scanPosition = xsp;\n//                                    if (scanToken(DOT)) {\n//                                        scanPosition = xsp;\n//                                        if (scanToken(EQ)) {\n//                                            scanPosition = xsp;\n//                                            if (scanToken(ESCAPED_CHAR)) {\n//                                                scanPosition = xsp;\n//                                                if (scanToken(IMAGE_LABEL)) {\n//                                                    scanPosition = xsp;\n//                                                    if (scanToken(GT)) {\n//                                                        scanPosition = xsp;\n//                                                        if (scanToken(LBRACK)) {\n//                                                            scanPosition = xsp;\n//                                                            if (scanToken(LPAREN)) {\n//                                                                scanPosition = xsp;\n//                                                                if (scanToken(LT)) {\n//                                                                    scanPosition = xsp;\n//                                                                    if (scanToken(RBRACK)) {\n//                                                                        scanPosition = xsp;\n//                                                                        if (scanToken(UNDERSCORE)) {\n//                                                                            scanPosition = xsp;\n//                                                                            lookingAhead = true;\n//                                                                            semanticLookAhead = !nextAfterSpace(RPAREN);\n//                                                                            lookingAhead = false;\n//                                                                            return (!semanticLookAhead\n//                                                                                    || scanWhitspaceToken());\n//                                                                        }\n//                                                                    }\n//                                                                }\n//                                                            }\n//                                                        }\n//                                                    }\n//                                                }\n//                                            }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanImageElement() {\n//        Token xsp = scanPosition;\n//        if (scanResourceElements()) {\n//            scanPosition = xsp;\n//            if (scanLooseChar()) {\n//                return true;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanResourceTextElements() {\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanResourceTextElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanResourceUrl() {\n//        return scanToken(LPAREN) || scanWhitspaceTokens() || scanResourceTextElements() || scanWhitspaceTokens()\n//                || scanToken(RPAREN);\n//    }\n//\n//    private boolean scanLinkElement() {\n//        Token xsp = scanPosition;\n//        if (scanImage()) {\n//            scanPosition = xsp;\n//            if (scanStrong()) {\n//                scanPosition = xsp;\n//                if (scanEm()) {\n//                    scanPosition = xsp;\n//                    if (scanCode()) {\n//                        scanPosition = xsp;\n//                        if (scanResourceElements()) {\n//                            scanPosition = xsp;\n//                            return scanLooseChar();\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanResourceElement() {\n//        Token xsp = scanPosition;\n//        if (scanToken(BACKSLASH)) {\n//            scanPosition = xsp;\n//            if (scanToken(COLON)) {\n//                scanPosition = xsp;\n//                if (scanToken(CHAR_SEQUENCE)) {\n//                    scanPosition = xsp;\n//                    if (scanToken(DASH)) {\n//                        scanPosition = xsp;\n//                        if (scanToken(DIGITS)) {\n//                            scanPosition = xsp;\n//                            if (scanToken(DOT)) {\n//                                scanPosition = xsp;\n//                                if (scanToken(EQ)) {\n//                                    scanPosition = xsp;\n//                                    if (scanToken(ESCAPED_CHAR)) {\n//                                        scanPosition = xsp;\n//                                        if (scanToken(IMAGE_LABEL)) {\n//                                            scanPosition = xsp;\n//                                            if (scanToken(GT)) {\n//                                                scanPosition = xsp;\n//                                                if (scanToken(LPAREN)) {\n//                                                    scanPosition = xsp;\n//                                                    if (scanToken(LT)) {\n//                                                        scanPosition = xsp;\n//                                                        if (scanToken(RPAREN)) {\n//                                                            scanPosition = xsp;\n//                                                            lookingAhead = true;\n//                                                            semanticLookAhead = !nextAfterSpace(RBRACK);\n//                                                            lookingAhead = false;\n//                                                            return (!semanticLookAhead || scanWhitspaceToken());\n//                                                        }\n//                                                    }\n//                                                }\n//                                            }\n//                                        }\n//                                    }\n//                                }\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanResourceElements() {\n//        if (scanResourceElement()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanResourceElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanLink() {\n//        if (scanToken(LBRACK) || scanWhitspaceTokens() || scanLinkElement()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanLinkElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        if (scanWhitspaceTokens() || scanToken(RBRACK)) {\n//            return true;\n//        }\n//        xsp = scanPosition;\n//        if (scanResourceUrl()) {\n//            scanPosition = xsp;\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanImage() {\n//        if (scanToken(LBRACK) || scanWhitspaceTokens() || scanToken(IMAGE_LABEL) || scanImageElement()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanImageElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        if (scanWhitspaceTokens() || scanToken(RBRACK)) {\n//            return true;\n//        }\n//        xsp = scanPosition;\n//        if (scanResourceUrl()) {\n//            scanPosition = xsp;\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanInlineElement() {\n//        Token xsp = scanPosition;\n//        if (scanTextTokens()) {\n//            scanPosition = xsp;\n//            if (scanImage()) {\n//                scanPosition = xsp;\n//                if (scanLink()) {\n//                    scanPosition = xsp;\n//                    lookingAhead = true;\n//                    semanticLookAhead = multilineAhead(ASTERISK);\n//                    lookingAhead = false;\n//                    if (!semanticLookAhead || scanToken(ASTERISK)) {\n//                        scanPosition = xsp;\n//                        lookingAhead = true;\n//                        semanticLookAhead = multilineAhead(UNDERSCORE);\n//                        lookingAhead = false;\n//                        if (!semanticLookAhead || scanToken(UNDERSCORE)) {\n//                            scanPosition = xsp;\n//                            lookingAhead = true;\n//                            semanticLookAhead = multilineAhead(BACKTICK);\n//                            lookingAhead = false;\n//                            if (!semanticLookAhead || scanCodeMultiline()) {\n//                                scanPosition = xsp;\n//                                return scanLooseChar();\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanParagraph() {\n//        Token xsp;\n//        if (scanInlineElement()) {\n//            return true;\n//        }\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanInlineElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanForCodeLanguageElement() {\n//        Token xsp = scanPosition;\n//        if (scanToken(CHAR_SEQUENCE)) {\n//            scanPosition = xsp;\n//            if (scanToken(BACKTICK)) {\n//                return true;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanForCodeLanguageElements() {\n//        if (scanForCodeLanguageElement()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanForCodeLanguageElement()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanWhitspaceToken() {\n//        Token xsp = scanPosition;\n//        if (scanToken(SPACE)) {\n//            scanPosition = xsp;\n//            if (scanToken(TAB)) {\n//                return true;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanFencedCodeBlock() {\n//        if (scanToken(BACKTICK) || scanToken(BACKTICK) || scanToken(BACKTICK)) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanToken(BACKTICK)) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        if (scanWhitspaceTokens()) {\n//            return true;\n//        }\n//        xsp = scanPosition;\n//        if (scanForCodeLanguageElements()) {\n//            scanPosition = xsp;\n//        }\n//        xsp = scanPosition;\n//        if (scanToken(EOL) || scanWhitspaceTokens()) {\n//            scanPosition = xsp;\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanBlockQuoteEmptyLines() {\n//        return scanBlockQuoteEmptyLine() || scanToken(EOL);\n//    }\n//\n//    private boolean scanBlockQuoteEmptyLine() {\n//        if (scanToken(EOL) || scanWhitspaceTokens() || scanToken(GT) || scanWhitspaceTokens()) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanToken(GT) || scanWhitspaceTokens()) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanForHeadersigns() {\n//        if (scanToken(EQ)) {\n//            return true;\n//        }\n//        Token xsp;\n//        while (true) {\n//            xsp = scanPosition;\n//            if (scanToken(EQ)) {\n//                scanPosition = xsp;\n//                break;\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanMoreBlockElements() {\n//        Token xsp = scanPosition;\n//        lookingAhead = true;\n//        semanticLookAhead = headingAhead(1);\n//        lookingAhead = false;\n//        if (!semanticLookAhead || scanForHeadersigns()) {\n//            scanPosition = xsp;\n//            if (scanToken(GT)) {\n//                scanPosition = xsp;\n//                if (scanToken(DASH)) {\n//                    scanPosition = xsp;\n//                    if (scanToken(DIGITS) || scanToken(DOT)) {\n//                        scanPosition = xsp;\n//                        if (scanFencedCodeBlock()) {\n//                            scanPosition = xsp;\n//                            return scanParagraph();\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    private boolean scanToken(int kind) {\n//        if (scanPosition == lastPosition) {\n//            lookAhead--;\n//            if (scanPosition.next == null) {\n//                lastPosition = scanPosition = scanPosition.next = tm.getNextToken();\n//            } else {\n//                lastPosition = scanPosition = scanPosition.next;\n//            }\n//        } else {\n//            scanPosition = scanPosition.next;\n//        }\n//        if (scanPosition.kind != kind) {\n//            return true;\n//        }\n//        if (lookAhead == 0 && scanPosition == lastPosition) {\n//            throw lookAheadSuccess;\n//        }\n//        return false;\n//    }\n//\n//    private int getNextTokenKind() {\n//        if (nextTokenKind != -1) {\n//            return nextTokenKind;\n//        } else if ((nextToken = token.next) == null) {\n//            token.next = tm.getNextToken();\n//            return (nextTokenKind = token.next.kind);\n//        }\n//        return (nextTokenKind = nextToken.kind);\n//    }\n//\n//    private Token consumeToken(int kind) {\n//        Token old = token;\n//        if (token.next != null) {\n//            token = token.next;\n//        } else {\n//            token = token.next = tm.getNextToken();\n//        }\n//        nextTokenKind = -1;\n//        if (token.kind == kind) {\n//            return token;\n//        }\n//        token = old;\n//        return token;\n//    }\n//\n//    private Token getToken(int index) {\n//        Token t = lookingAhead ? scanPosition : token;\n//        for (int i = 0; i < index; i++) {\n//            if (t.next != null) {\n//                t = t.next;\n//            } else {\n//                t = t.next = tm.getNextToken();\n//            }\n//        }\n//        return t;\n//    }\n//\n//    public void setModules(Module... modules) {\n//        this.modules = Arrays.asList(modules);\n//    }\n//\n//}\n","koara.Token = function() {}\n\nkoara.Token.prototype = {\n\tconstructor: koara.Token\n\t\t\n}","koara.TokenManager = function(cs) {\n\tthis.cs = cs;\n}\n\nkoara.TokenManager.prototype = {\n\tconstructor: koara.TokenManager\n\t\t\n}","koara.TreeState = function() {\n\tthis.nodes = [];\n\tthis.marks = [];\n\tthis.nodesOnStack = 0;\n\tthis.currentMark = 0;\n}\n\nkoara.TreeState.prototype = {\n\tconstructor: koara.TreeState,\n\t\n\topenScope: function() {\n\t\tthis.marks.push(this.currentMark);\n\t\tthis.currentMark = this.nodesOnStack;\n\t},\n\t\n\tcloseScope: function(n) {\n\t\ta = this.nodeArity();\n\t\tthis.currentMark = marks.pop(); // currentMark = marks.remove(marks.size() - 1);\n\t\twhile (a-- > 0) {\n          c = this.popNode();\n          c.setParent(n);\n          n.add(c, a);\n        }\n\t\tthis.pushNode(n);\n\t},\n\t\n\taddSingleValue: function(n, t) {\n\t\tthis.openScope();\n        n.setValue(t.image);\n        this.closeScope(n);\n\t},\n\t\n\tnodeArity: function() {\n\t\treturn this.nodesOnStack - this.currentMark;\n\t}, \n\t\n    popNode: function() {\n    \t--nodesOnStack;\n    \treturn nodes.pop();\n    },\n    \n    pushNode: function(n) {\n    \tthis.nodes.add(n);\n    \t ++this.nodesOnStack;\n    }\n\t\t\n}\n\n"],"sourceRoot":"/source/"}